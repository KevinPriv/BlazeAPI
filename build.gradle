// For those who want the bleeding edge
buildscript {
    ext.kotlin_version = '1.3.0'
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://jitpack.io'
        }

    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.0"
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'kotlin'
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8


version = "1.0"
group = "me.kbrewster.blazeapi" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Blaze API"

minecraft {
    version = "1.8.9"
    mappings = "stable_20"
    tweakClass = "me.kbrewster.blazeapi.api.internal.BlazeTweaker"
    runDir = 'run'
    makeObfSourceJar = false
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.0"
    compile 'com.github.FalseHonesty:Blaze:master-SNAPSHOT'
    compile('org.spongepowered:mixin:0.7.5-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

    testCompile group: 'junit', name: 'junit', version: '4.4'
}


repositories {
    maven { url "https://jitpack.io" }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven/'
    }
    mavenCentral()
    jcenter()
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts { archives packageSources }

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
